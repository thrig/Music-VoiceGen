#!/usr/bin/env perl
#
#     perl eg/consonance >eg/out.json 2>eg/iter.log
#   should (eventually) result in output suitable to feed to eg/melodize
# below here look for things to TWEAK
#
#   awk '/^iter/{print $2,$4}' eg/iter.log | r-fu --width=12 xy - eg/out.pdf; open eg/out.pdf
#
# will graph the progress from iter.log (assuming that awk and r-fu are
# available, etc). A control+c will abort things early, and use the best
# phrase generated to date.

use 5.10.0;
use strict;
use warnings;

use JSON::MaybeXS;
use List::UtilsBy qw(nsort_by);
use Music::VoiceGen;

use Music::Tension::Cope;
my $tension = Music::Tension::Cope->new;

# TWEAK, TWEAK, TWEAK, TWEAK
# how long to go on for
my $BEATS = 64;

my $ITERATIONS = 1000;
my $TRIALS     = 1000;

# allowed intervals
my @intervals = qw/0 1 2 3 3 4 5 7 8 12 -1 -2 -3 -4 -5 -7 -8 -12/;

my $MC = 3;

# how many voices and what pitches they are allowed to hit NOTE this is
# soprano[0] and bass[-1], if you need voice specific rules
my @voices = (
    Music::VoiceGen->new(
        pitches     => [qw/65 67 69 71 72 74 76 77 79 81/],
        intervals   => \@intervals,
        MAX_CONTEXT => $MC,
        contextfn   => \&contextfn,
        weightfn    => \&weighty,
    ),
    Music::VoiceGen->new(
        pitches     => [qw/57 59 60 62 64 65 67 69 71 72/],
        intervals   => \@intervals,
        MAX_CONTEXT => $MC,
        contextfn   => \&contextfn,
        weightfn    => \&weighty,
    ),
    Music::VoiceGen->new(
        pitches     => [qw/48 50 52 53 55 57 59 60 62 64/],
        intervals   => \@intervals,
        MAX_CONTEXT => $MC,
        contextfn   => \&contextfn,
        weightfn    => \&weighty,
    ),
    Music::VoiceGen->new(
        pitches     => [qw/41 43 45 47 48 50 52 53 55 57/],
        intervals   => \@intervals,
        MAX_CONTEXT => $MC,
        contextfn   => \&contextfn,
        weightfn    => \&weighty,
    ),
);

my ( $best_phrase, $best_score );
$best_score = ~0;

eval {
    # Must also handle PIPE, as if piping to some other command, a
    # control+c will signal all the processes in the foreground process
    # group, which will cause a PIPE to this process as the process
    # being piped to closes its fd.
    for my $sig (qw/INT PIPE/) {
        $SIG{$sig} = sub { die "bailout\n"; };
    }
    for my $iter ( 1 .. $ITERATIONS ) {
        my @results;
        for my $trialn ( 1 .. $TRIALS ) {
            my @phrase;
            for my $voicen ( 0 .. $#voices ) {
                my @melody;
                for my $note ( 0 .. $BEATS - 1 ) {
                    push @melody, $voices[$voicen]->rand;
                }
                push @phrase, \@melody;
            }
            # scoring function really needs a "vertically oriented pitch set"
            # which some of you may recognize as a "chord"
            my @vops;
            for my $note ( 0 .. $#{ $phrase[0] } ) {
                push @vops, [ sort { $a <=> $b } map { $phrase[$_][$note] } 0 .. $#phrase ];
            }
            push @results, [ score_vops( \@vops, $trialn ), \@phrase ];
        }

        # TWEAK this selects the top N% to update the possibles with.
        # Simulated annealing did not work out so well (garbage in...) so
        # easier and faster to pick a set amount of the best results.
        @results = ( nsort_by { $_->[0] } @results )[ 0 .. $#results * 0.01 ];
        for my $phrase ( map { $_->[1] } @results ) {
            for my $voicen ( 0 .. $#$phrase ) {
                my $possibles = $voices[$voicen]->possibles;
                $voices[$voicen]->subsets( 2, $MC + 1,
                    sub { $possibles->{ join ".", @_[ 0 .. $#_ - 1 ] }{ $_[-1] } += 1 },
                    $phrase->[$voicen] );
                $voices[$voicen]->update($possibles);
            }
        }

        if ( $results[0][0] <= $best_score ) {
            $best_phrase = [ @{ $results[0][1] } ];
            $best_score  = $results[0][0];
        }

        warn sprintf "iter %d score %.2f best %.2f\n", $iter,
          $results[0][0], $best_score;
    }
};

# most likely due to a quick INT signal or who knows
die "no best phrase?!\n" if $best_score == ~0;

print encode_json($best_phrase);

exit;

sub contextfn {
    my ( $choice, $mrd, $count ) = @_;
    if ( CORE::rand( $count + ( $count - 1 ) / 2 ) < 1 ) {
        $choice = $mrd->rand;
    }
    return $choice, 0;
}

sub score_vops {
    my ( $vops, $trialn ) = @_;
    # TWEAK could change scoring, etc
    my %scores = (
        rootmotion => { weight => 0.5, score => 0 },
        vertical   => { weight => 2,   score => 0 },
    );
    for my $chordn ( 0 .. $#$vops ) {
        $scores{vertical}->{score} += $tension->vertical( $vops->[$chordn] );
        if ( $chordn > 0 ) {
            $scores{rootmotion}->{score} +=
              $tension->approach( $vops->[$chordn][0] - $vops->[ $chordn - 1 ][0] );
        }
    }
    my $score = 0;
    for my $sr ( values %scores ) {
        $score += $sr->{weight} * $sr->{score};
    }
    #   if ($trialn % 1000 == 0) {
    #     use Data::Dumper::Concise::Aligned; warn DumperA score => \%scores;
    #   }
    return $score;
}

sub weighty {
    my ( $from, $to, $interval ) = @_;
    # TWEAK desc intervals more common, favor thirds for chance of
    # passing notes from melodize (an equal weighted start resulted in
    # poorer output)
    my %intervals = (
        -12 => 100,
        -8  => 100,
        -7  => 400,
        -5  => 1000,
        -4  => 2000,
        -3  => 2000,
        -2  => 1800,
        -1  => 1800,
        0   => 400,
        1   => 1400,
        2   => 1400,
        3   => 1800,
        4   => 1800,
        5   => 800,
        7   => 200,
        8   => 100,
        12  => 100,
    );
    return $intervals{$interval} // die "no such interval $interval";
}
